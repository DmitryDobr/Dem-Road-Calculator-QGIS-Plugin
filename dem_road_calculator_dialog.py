# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DemRoadCalculatorDialog
                                 A QGIS plugin
 Calculate slope and aspect road lines using DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dmitry D.
        email                : dmitrdobr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import (
    QgsRasterLayer,
    QgsMapLayerProxyModel,
)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dem_road_calculator_dialog_base.ui'))


class DemRoadCalculatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DemRoadCalculatorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.mMapLayerComboBox_lines.setFilters(QgsMapLayerProxyModel.LineLayer) # загрузка фильтра слоев в QgsMapLayerComboBox
        self.mMapLayerComboBox_DEM.setFilters(QgsMapLayerProxyModel.RasterLayer) # загрузка фильтра слоев в QgsMapLayerComboBox

        self.mRasterBandComboBox.setLayer(self.mMapLayerComboBox_DEM.currentLayer())
    
    def getTaskOptions(self):
        params = []
        # selected layers and params
        params.append(self.mMapLayerComboBox_lines.currentLayer())
        params.append(self.mMapLayerComboBox_DEM.currentLayer())
        params.append(self.mRasterBandComboBox.currentBand())
        params.append(self.doubleSpinBox_sample.value())
        params.append(self.comboBox_algorytm.currentIndex())
        params.append(self.spinBox_roundVal.value())

        vector_fields = dict()
        hgt_field_name = '_hgt'
        slope_field_name = '_slope'
        aspect_field_name = '_aspect'

        # selected values to calculate
        if (self.checkBox_val_hgt.isChecked()):
            if (self.lineEdit_val_hgt.text()):
                hgt_field_name = self.lineEdit_val_hgt.text()
            vector_fields['_hgt'] = hgt_field_name

        if (self.checkBox_val_slope.isChecked()):
            if (self.lineEdit_val_slope.text()):
                slope_field_name = self.lineEdit_val_slope.text()
            vector_fields['_slope'] = slope_field_name

        if (self.checkBox_val_aspect.isChecked()):
            if (self.lineEdit_val_aspect.text()):
                aspect_field_name = self.lineEdit_val_aspect.text()
            vector_fields['_aspect'] = aspect_field_name

        
        params.append(dict(sorted(vector_fields.items())))

        return params

        

    
    def setGUIEnabled(self, flag):
        # self.tabWidget.widget(0).setEnabled(flag)
        self.pushButton_start.setEnabled(flag)
        pass
