# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RoadAnalysis
                                 A QGIS plugin
 Plugin for road analysis with DEM info
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dmitry D.
        email                : dmitrdobr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    Qgis,
    QgsProject, 
    QgsVectorLayer, 
    QgsRasterLayer,
    QgsMapLayer,
    QgsFeature, 
    QgsFeatureIterator, 
    QgsPointXY, 
    QgsMapLayerProxyModel,
    QgsTask,
    QgsMessageLog,
    QgsCoordinateTransform,
    QgsReferencedGeometryBase,
    QgsCoordinateReferenceSystem,
    QgsTaskManager
)


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dem_road_analysis_dialog import RoadAnalysisDialog
import os.path

VERSION = Qgis.QGIS_VERSION
MESSAGE_CATEGORY = "RoadTask"
TASK_DESCRIPTION = "ROAD_DEM_CALCULATION"


class DemRoadCalculationOptions():
    def __init__(self, dem_layer, lines, step, band):
        self.DemLayer = dem_layer   # QgsRasterLayer
        self.roadLines = lines      # QgsVectorLayer
        self.SampleStep = step      # numerical step of sampling raster
        self.BandNo = band          # integer, number of band

    def __str__(self):
        str_r = "Calculation Parameters\n"
        str_r += "Lines Layer: " + self.roadLines.name() + "\n"
        str_r += "DEM Layer: " + self.DemLayer.name() + " Band:" + str(self.BandNo) + "\n"
        str_r += "Sample Step: " + str(self.SampleStep) + " in " + str(self.DemLayer.crs().mapUnits())  + "\n"
        return str_r
      
class CalculateTask(QgsTask): # тестовая версия задачи
    def __init__(self, description, task_options):
        super().__init__(description, QgsTask.CanCancel)
        self.options = task_options
        self.result = None
    
    def run(self): # основная функция задачи     
        print('** Task run')
        current_progress = 0.0
        while (current_progress < 100):
            self.setProgress(current_progress)
            current_progress+=10

        return True
    
    def finished(self, result): # завершение задачи
        print('Task Ended with ' + str(result))
        self.result = result
       
    def cancel(self): # отмена задачи
        super().cancel()


class RoadAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RoadAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dem Road Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.task_manager = QgsTaskManager()
        self.task_manager.allTasksFinished.connect(self.allTasksFinished)
        self.task_manager.progressChanged.connect(self.taskProgresChanged)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RoadAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dem_road_analysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Road analysis with DEM info'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Dem Road Analysis'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RoadAnalysisDialog()

            self.dlg.pushButton_start.clicked.connect(self.runTask)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    
    def runTask(self):
        self.dlg.textEdit_log.append("Запуск алгоритма " + TASK_DESCRIPTION )
        self.dlg.tabWidget.setCurrentIndex(1)
    
    def allTasksFinished(self): # все активные задачи завершены
        print("--------ALL-TASKS-FINISED-----------")
        for i, task in enumerate(self.task_manager.tasks()):
            self.dlg.textEdit_log.append("Task No " + str(i) + " Finished with " + str(task.result))
            del task
        
        # print(len(self.task_manager.tasks()))
        # print(self.task_manager.count())
    
    def taskProgresChanged(self, task_id, progress): # прогресс в задаче обновлен
        print(task_id, progress)
