# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RoadAnalysis
                                 A QGIS plugin
 Plugin for road analysis with DEM info
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dmitry D.
        email                : dmitrdobr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, pyqtSignal, pyqtSlot, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    Qgis,
    QgsVector,
    QgsProject, 
    QgsVectorLayer, 
    QgsRasterLayer,
    QgsMapLayer,
    QgsGeometry,
    QgsFeature, 
    QgsFeatureIterator, 
    QgsPointXY, 
    QgsTask,
    QgsField,
    QgsCoordinateTransform,
    QgsReferencedGeometryBase,
    QgsCoordinateReferenceSystem,
    QgsTaskManager,
    edit
)

import math
from enum import IntEnum


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dem_road_analysis_dialog import RoadAnalysisDialog
import os.path

VERSION = Qgis.QGIS_VERSION
MESSAGE_CATEGORY = "RoadTask"
TASK_DESCRIPTION = "ROAD_DEM_CALCULATION"

# возможно временное решение
class VectorPointCreator():
    def __init__(self):
        self.vl = QgsVectorLayer("Point", "temporary_points", "memory")
        self.pr = self.vl.dataProvider()

        crs = self.vl.crs()
        crs.createFromId(3857)
        self.vl.setCrs(crs)
        
        self.vl.startEditing()
        # add fields
        self.pr.addAttributes( [ 
                    QgsField("height_",  QVariant.Double),
                    QgsField("slope_",  QVariant.Double),
                    QgsField("aspect_", QVariant.Double)
                ] )
        self.vl.commitChanges()

        QgsProject.instance().addMapLayer(self.vl)

    def addPoint(self, point, height, slope, aspect): # QgsPointXY
        self.vl.startEditing()

        feature = QgsFeature()
        feature.setGeometry( QgsGeometry.fromPointXY(point) )
        feature.setAttributes([height,slope,aspect])
        self.pr.addFeatures( [ feature ] )

        self.vl.commitChanges()


class OrtogonalGradientsCalculate(IntEnum):
    ZEVERBERGEN = 0
    AVERAGEWEIGHT = 1
    _3FDWRSD = 2

class DemRoadCalculationOptions():
    def __init__(self, dem_layer, lines, step, band, alg = 0, round = 2):
        self.DemLayer = dem_layer   # QgsRasterLayer
        self.roadLines = lines      # QgsVectorLayer
        self.SampleStep = step      # numerical step of sampling raster
        self.BandNo = band          # integer, number of band
        self.gradientAlgorytm = OrtogonalGradientsCalculate(alg)
        self.roundVal = round

        # проверка векторного слоя на заполненность полей
        self.HFieldIndex = self.roadLines.fields().lookupField("HeightVal_")
        if (self.HFieldIndex == -1):
            self.roadLines.dataProvider().addAttributes([QgsField("HeightVal_", QVariant.Double)])
            self.roadLines.updateFields()
            self.HFieldIndex = self.roadLines.fields().lookupField("HeightVal_")

        self.SFieldIndex = self.roadLines.fields().lookupField("SlopeVal_")
        if (self.SFieldIndex == -1):
            self.roadLines.dataProvider().addAttributes([QgsField("SlopeVal_", QVariant.Double)])
            self.roadLines.updateFields()
            self.SFieldIndex = self.roadLines.fields().lookupField("SlopeVal_")

        self.AFieldIndex = self.roadLines.fields().lookupField("AspectVal_")
        if (self.AFieldIndex == -1):
            self.roadLines.dataProvider().addAttributes([QgsField("AspectVal_", QVariant.Double)])
            self.roadLines.updateFields()
            self.AFieldIndex = self.roadLines.fields().lookupField("AspectVal_")

        # print(self.roadLines.crs().axisOrdering())

    def __str__(self):
        str_r = "Calculation Parameters\n"
        str_r += "Lines Layer: " + self.roadLines.name() + "\n"
        str_r += "DEM Layer: " + self.DemLayer.name() + " Band:" + str(self.BandNo + 1) + "\n"
        str_r += "Sample Step: " + str(self.SampleStep) + " in " + str(self.DemLayer.crs().mapUnits())  + "\n"
        str_r += "Algorytm_id: " + str(self.gradientAlgorytm)
        return str_r

    def renderRasterValue(self, point):
        val, res = self.DemLayer.dataProvider().sample(point , self.BandNo + 1)
        if (res):
            return val
        else:
            return None
      
class CalculateTask(QgsTask): # тестовая версия задачи
    printResult = pyqtSignal(str)

    def __init__(self, description, task_options):
        super().__init__(description, QgsTask.CanCancel)
        self.options = task_options
        self.result = None

        self.vectorEdit = VectorPointCreator()


    def P2P_Calculation(self, p1, p2): # вычисление параметров между 2мя точками
        vector = p2-p1

        count_points = 0
        sumHeight = 0
        SlopeSum = 0
        AspectSum = 0

        if (vector.length() > self.options.SampleStep):
            count_points = math.floor(vector.length() / self.options.SampleStep) # число точек на линии для замера
            vector = vector.normalized() # направление от точки до точки

            current_point = p1
            
            rasterX = self.options.DemLayer.rasterUnitsPerPixelX()
            rasterY = self.options.DemLayer.rasterUnitsPerPixelY()

            for i in range(1,count_points):
                current_point = current_point + vector*self.options.SampleStep # очередная точка

                SlWindowMatrix = [[0] * 3 for _ in range(3)] # конструкция матрицы
                # заполнение матрицы скользящего окна
                for y in range(-1,2):
                    for x in range(-1,2):
                        buf_point = QgsPointXY(current_point) # буферная точка
                        buf_point += QgsVector(rasterX*x, -rasterY*y) # смещение точки для заполнения матрицы
                        val = self.options.renderRasterValue(buf_point)

                        SlWindowMatrix[y+1][x+1] = val

                # вычисление уклона по перпендикулярным градиентам поверхности
                fx = 0
                fy = 0

                if (self.options.gradientAlgorytm == OrtogonalGradientsCalculate._3FDWRSD):
                    fx = (SlWindowMatrix[2][0] - SlWindowMatrix[2][2] + 
                            2 * (SlWindowMatrix[1][0] - SlWindowMatrix[1][2]) +
                            SlWindowMatrix[0][0] - SlWindowMatrix[0][2]) / (8 * rasterX)
                    
                    fy = (SlWindowMatrix[0][2] - SlWindowMatrix[2][2] +
                            2 * (SlWindowMatrix[0][1] - SlWindowMatrix[2][1]) + 
                            SlWindowMatrix[0][0] - SlWindowMatrix[2][0]) / (8 * rasterY)
                elif (self.options.gradientAlgorytm == OrtogonalGradientsCalculate.AVERAGEWEIGHT):
                    fx = 1/2 * ( ((SlWindowMatrix[0][2]+SlWindowMatrix[1][2]+SlWindowMatrix[2][2]) / 3 - 
                                  (SlWindowMatrix[0][0]+SlWindowMatrix[1][0]+SlWindowMatrix[2][0]) / 3 ) / rasterX)

                    fy = 1/2 * ( ((SlWindowMatrix[0][0]+SlWindowMatrix[0][1]+SlWindowMatrix[0][2]) / 3 - 
                                  (SlWindowMatrix[2][0]+SlWindowMatrix[2][1]+SlWindowMatrix[2][2]) / 3 ) / rasterY)    
                elif (self.options.gradientAlgorytm == OrtogonalGradientsCalculate.ZEVERBERGEN):
                    fx = 1/2 * ( (SlWindowMatrix[1][2] - SlWindowMatrix[1][0]) / rasterX)
                    fy = 1/2 * ( (SlWindowMatrix[0][1] - SlWindowMatrix[2][1]) / rasterY)

                SlopeVal = math.atan(math.sqrt(pow(fx,2) + pow(fy,2))) * 57.29578 # * 57.29578 - перевод в градусы?
                
                # вычисление экспозиции 
                wght1 = ((SlWindowMatrix[0][2] != None if 1 else 0) + 
                         2*(SlWindowMatrix[1][2] != None if 1 else 0) + 
                         (SlWindowMatrix[2][2] != None if 1 else 0))
                
                wght2 = ((SlWindowMatrix[0][0] != None if 1 else 0) + 
                         2*(SlWindowMatrix[1][0] != None if 1 else 0) + 
                         (SlWindowMatrix[2][0] != None if 1 else 0))
                
                wght3 = ((SlWindowMatrix[2][0] != None if 1 else 0) + 
                         2*(SlWindowMatrix[2][1] != None if 1 else 0) + 
                         (SlWindowMatrix[2][2] != None if 1 else 0))

                wght4 = ((SlWindowMatrix[0][0] != None if 1 else 0) + 
                         2*(SlWindowMatrix[0][1] != None if 1 else 0) + 
                         (SlWindowMatrix[0][2] != None if 1 else 0))

                
                fx = ((SlWindowMatrix[0][2] + 2*SlWindowMatrix[1][2] + SlWindowMatrix[2][2]) * 4 / wght1
                     - (SlWindowMatrix[0][0] + 2*SlWindowMatrix[1][0] + SlWindowMatrix[2][0]) * 4 / wght2)

                fy = ((SlWindowMatrix[2][0] + 2*SlWindowMatrix[2][1] + SlWindowMatrix[2][2]) * 4 / wght3
                     - (SlWindowMatrix[0][0] + 2*SlWindowMatrix[0][1] + SlWindowMatrix[0][2]) * 4 / wght4)
                
                
                AspectVal = (180/math.pi) * math.atan2(fy, -fx)
                
                if AspectVal < 0:
                    AspectVal = 90.0 - AspectVal
                elif AspectVal > 90.0:
                    AspectVal = 360.0 - AspectVal + 90.0
                else:
                    AspectVal = 90.0 - AspectVal

                # print(AspectVal)

                self.vectorEdit.addPoint(current_point, SlWindowMatrix[1][2], SlopeVal, AspectVal)

                SlopeSum += SlopeVal
                AspectSum += AspectVal
                sumHeight += SlWindowMatrix[1][2]
        
        return (sumHeight , SlopeSum , AspectSum, count_points - 1)
    
    def run(self): # основная функция задачи  
        print('** Task run')
        current_progress = 0.0

        LineFeatures = self.options.roadLines.getFeatures() # QgsFeatureIterator
        if not LineFeatures.isValid(): # проверка на ошибки в получении объектов
            self.printResult.emit("[" + TASK_DESCRIPTION + "]: (ERROR) Not Valid iterator in vector layer")
            print("** Not Valid iterator")
            return False

        if (self.options.roadLines.featureCount() == 0):
            self.printResult.emit("[" + TASK_DESCRIPTION + "]: (ERROR) Zero Geometry")
            return False
        
        step = 100 / self.options.roadLines.featureCount()        
        iterator = 0

        for LineFeature in LineFeatures: # проход по всем объектам слоя
            if self.isCanceled():
                return False

            self.printResult.emit("feature no " + str(iterator))

            LineGeometry = None
            try:
                LineGeometry = LineFeature.geometry().asMultiPolyline()
            except TypeError:
                try:
                    LineGeometry = LineFeature.geometry().asPolyline()
                except TypeError:
                    self.printResult.emit("** No Valid Geometry")
                    print("[" + TASK_DESCRIPTION + "]: (ERROR) No Valid Geometry")
                    return False
                else:
                    self.printResult.emit("accesing polyline")
                    # полилиния = список точек => [i] => точка
                    length = len(LineGeometry)
                    
                    MeanHeight = 0
                    MeanSlope = 0
                    PointsCount = 0
                    for i in range(0,length-1): # пересчет линий в объекте в представлении как точка начала и точка конца
                        res = self.P2P_Calculation(LineGeometry[i], LineGeometry[i+1])
                        MeanHeight += res[0]
                        MeanSlope += res[1]
                        PointsCount += res[2]
                        

                    with edit(self.options.roadLines):
                        LineFeature.setAttribute(self.options.HFieldIndex , MeanHeight / PointsCount)
                        LineFeature.setAttribute(self.options.SFieldIndex , MeanSlope / PointsCount)
                        self.options.roadLines.updateFeature(LineFeature)
            else:
                # мультиполилиния = список полилиний => [i] => полилиния = список точек => [j] => точка
                # нужна будет опция о разбиении мультиполилиний на множество полилиний в новом временном слое??
                self.printResult.emit("accesing multipolyline")
                print('---------------------------------------------')
                
                PolyLineIterator = 0

                SumHeight = 0
                SumSlope = 0
                SumAspect = 0
                PointsCount = 0

                for PolyLine in LineGeometry:
                    length = len(PolyLine)

                    for i in range(0,length-1): # пересчет линий в объекте в представлении как точка начала и точка конца
                        res = self.P2P_Calculation(PolyLine[i], PolyLine[i+1])
                        SumHeight += res[0]
                        SumSlope += res[1]
                        SumAspect += res[2]
                        PointsCount += res[3]

                    PolyLineIterator += 1

                print(SumSlope, SumAspect, PointsCount)

                with edit(self.options.roadLines):
                    LineFeature.setAttribute(self.options.HFieldIndex , round(SumHeight / PointsCount, self.options.roundVal))
                    LineFeature.setAttribute(self.options.SFieldIndex , round(SumSlope / PointsCount, self.options.roundVal))
                    LineFeature.setAttribute(self.options.AFieldIndex , round(SumAspect / PointsCount, self.options.roundVal))
                    self.options.roadLines.updateFeature(LineFeature)
                    self.printResult.emit("update fields")
                
            iterator += 1
            self.printResult.emit("done")
                                  
            current_progress += step
            self.setProgress(round(current_progress))

        return True
    
    def finished(self, result): # завершение задачи
        print('*** Task Ended with ' + str(result))
        self.result = result
       
    def cancel(self): # отмена задачи
        print('** Task cancel')
        super().cancel()


class RoadAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RoadAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dem Road Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.task_manager = QgsTaskManager()
        self.task_manager.allTasksFinished.connect(self.allTasksFinished)
        self.task_manager.progressChanged.connect(self.taskProgresChanged)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RoadAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dem_road_analysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Road analysis with DEM info'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Dem Road Analysis'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RoadAnalysisDialog()

            self.dlg.pushButton_start.clicked.connect(self.runTask)
            self.dlg.pushButton_stop.clicked.connect(self.stopTask)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    
    def runTask(self):
        
        self.dlg.setGUILocked(False)

        self.dlg.textEdit_log.append("Запуск алгоритма " + TASK_DESCRIPTION )
        self.dlg.tabWidget.setCurrentIndex(1)

        # конструкция параметров задачи
        cur_opt = DemRoadCalculationOptions(self.dlg.mMapLayerComboBox_DEM.currentLayer(), 
                                            self.dlg.mMapLayerComboBox_lines.currentLayer(),
                                            self.dlg.doubleSpinBox_sample.value(),
                                            self.dlg.comboBox_band.currentIndex(),
                                            self.dlg.comboBox_algorytm.currentIndex(),
                                            self.dlg.spinBox_roundVal.value())
        
        self.dlg.textEdit_log.append(str(cur_opt))

        active_task = CalculateTask(TASK_DESCRIPTION, cur_opt)


        active_task.printResult.connect(self.info)

        self.task_manager.addTask(active_task)
        self.dlg.progressBar.setValue(0)

    def stopTask(self):
        self.task_manager.cancelAll()

    def info(self, arg1):
        self.dlg.textEdit_log.append(arg1)

    def allTasksFinished(self): # все активные задачи завершены
        print("[Task Manager]: ALL TASKS FINISED")
        for i, task in enumerate(self.task_manager.tasks()):
            self.dlg.textEdit_log.append("Task No " + str(i) + " Finished with " + str(task.result))
            del task
        
        self.dlg.setGUILocked(True)
        
        # print(len(self.task_manager.tasks()))
        # print(self.task_manager.count())
    
    def taskProgresChanged(self, task_id, progress): # прогресс в задаче обновлен
        # print(task_id, progress)
        self.dlg.progressBar.setValue(int(progress))

