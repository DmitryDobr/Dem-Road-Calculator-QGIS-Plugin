# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DemRoadCalculator
                                 A QGIS plugin
 Calculate slope and aspect road lines using DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Dmitry D.
        email                : dmitrdobr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, pyqtSignal, pyqtSlot, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    Qgis,
    QgsVector,
    QgsProject, 
    QgsVectorLayer, 
    QgsRasterLayer,
    QgsMapLayer,
    QgsGeometry,
    QgsFeature, 
    QgsFeatureIterator, 
    QgsPointXY, 
    QgsTask,
    QgsField,
    QgsFields,
    QgsCoordinateTransform,
    QgsCoordinateTransformContext,
    QgsReferencedGeometryBase,
    QgsCoordinateReferenceSystem,
    QgsTaskManager,
    edit
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dem_road_calculator_dialog import DemRoadCalculatorDialog
import os.path

import math
from .calculations import functionList, _3x3WindowMatrix, _WGHT

VERSION = Qgis.QGIS_VERSION
MESSAGE_CATEGORY = "RoadTask"
TASK_DESCRIPTION = "ROAD_DEM_CALCULATION"

class CalculationData(): # DataClass for calculation params
    def __init__(self, rasterLayer, vectorLayer, bandNo, fields, step = 100, roundval = 2, algorytm = 0):
        self.DemRasterLayer = rasterLayer
        self.LineRoadsLayer = vectorLayer
        self.RasterChannel = bandNo
        self.VectorFields = fields # dict with _hgt, _slope, _aspect fields names
        self.SampleStep = step
        self.RoundValue = roundval
        self.AlgoritmId = algorytm

        ####
        self.transformer = QgsCoordinateTransform(self.LineRoadsLayer.crs(), self.DemRasterLayer.crs(), QgsProject.instance())

        self.GradientsFunction = functionList[algorytm]

    def __str__(self):
        str_r = "Calculation Parameters\n"
        str_r += "Lines Layer: " + self.LineRoadsLayer.name() + "\n"
        str_r += "DEM Layer: " + self.DemRasterLayer.name() + " Band:" + str(self.RasterChannel) + "\n"
        str_r += "Sample Step: " + str(self.SampleStep) + " in " + str(self.DemRasterLayer.crs().mapUnits())  + "\n"
        str_r += "Algorytm_id: " + str(self.AlgoritmId)
        return str_r
    
    def checkCrs(self):
        pass

    def getWindowMatrixAtPoint(self, point):
        rasterX = self.DemRasterLayer.rasterUnitsPerPixelX()
        rasterY = self.DemRasterLayer.rasterUnitsPerPixelY()

        transformedPoint = self.transformer.transform(point)
        
        SlWindowMatrix = [[0] * 3 for _ in range(3)] # конструкция матрицы
        # заполнение матрицы скользящего окна
        for y in range(-1,2):
            for x in range(-1,2):
                buf_point = QgsPointXY(transformedPoint) # буферная точка
                buf_point += QgsVector(rasterX*x, -rasterY*y) # смещение точки для заполнения матрицы
                val, res = self.DemRasterLayer.dataProvider().sample(buf_point , self.RasterChannel)

                SlWindowMatrix[y+1][x+1] = val if res else None
        
        return SlWindowMatrix

    def renderValuesAtPoint(self, point): # get values from DEM with given QgsPoint
        result = dict()

        # matrix = _3x3WindowMatrix()

        transformedPoint = self.transformer.transform(point)
        val, res = self.DemRasterLayer.dataProvider().sample(transformedPoint , self.RasterChannel)
        
        matrix = self.getWindowMatrixAtPoint(point)
        # print(matrix[0])
        # print(matrix[1])
        # print(matrix[2])

        matrix = _3x3WindowMatrix(matrix)

        # rendered value and bool flag of correct result

        if (self.VectorFields.get('_hgt')):
            result[self.VectorFields['_hgt']] = val if res else -999

        if (self.VectorFields.get('_slope')):
            fx, fy = self.GradientsFunction(matrix, self.DemRasterLayer.rasterUnitsPerPixelX())
            SlopeVal = math.atan(math.sqrt(pow(fx,2) + pow(fy,2))) * 57.29578
            result[self.VectorFields['_slope']] = SlopeVal

        if (self.VectorFields.get('_aspect')):
            fx, fy = _WGHT(matrix)
            AspectVal = (180/math.pi) * math.atan2(fy, -fx)
            result[self.VectorFields['_aspect']] = AspectVal

        print(result)
        
        return dict(sorted(result.items()))
        

class LineWrapper(): # wrapper for line geometry
    def __init__(self, lineGeometry):
        self.LineGeometry = None # reference to original QgsGeometry
        self.Multiline = False # object is MultiPolyLine or not
        self.isValid = True # object is valid
        try:
            self.LineGeometry = lineGeometry.asMultiPolyline()
        except TypeError:
            try:
                self.LineGeometry = lineGeometry.asPolyline()
            except TypeError:
                self.isValid = False
        else:
            self.Multiline = True

        self.currentIndexPoint = -1 # current Id of original point of geometry
        self.currentIndexPart = 0 # current Id of part of MultiPolyLine
        self.currentVector = None # current vector on which need to find new point
        self.currentPoint = None # current point from which need to find new point on given currentvector
    
    def nextPointOnGeometryAt(self, meters): # next point from current on line with given value of meters
        if (not self.currentPoint):
            self.nextPart()
            return True
        
        if (self.Multiline): # QgsMultiPolyLine
            newPoint = None
            toAdd = meters 
            flag = False

            while meters > 0:
                if (flag):
                    toAdd = meters
                    if (not self.nextPart()):
                        self.currentPoint = self.LineGeometry[self.currentIndexPart][self.currentIndexPoint + 1]
                        return False
                    
                meters = meters - self.currentVector.length()
                flag = True

            newPoint = self.currentPoint + self.currentVector.normalized() * toAdd
            self.currentVector = self.LineGeometry[self.currentIndexPart][self.currentIndexPoint + 1] - newPoint # new vector is next point of original geom - current calculated point
            self.currentPoint = newPoint

            return True

        else: # QgsPolyLine
            newPoint = None
            toAdd = meters 
            flag = False

            while meters > 0:
                if (flag):
                    toAdd = meters
                    if (not self.nextPart()):
                        self.currentPoint = self.LineGeometry[self.currentIndexPoint + 1]
                        return False
                    
                meters = meters - self.currentVector.length()
                flag = True

            newPoint = self.currentPoint + self.currentVector.normalized() * toAdd
            self.currentVector = self.LineGeometry[self.currentIndexPoint + 1] - newPoint # new vector is next point of original geom - current calculated point
            self.currentPoint = newPoint

            return True
            
    def getCurrentPoint(self): # current calculated point
        return self.currentPoint 
    
    def getCurrentSegment(self): # current segment of two QgsPoint of original geometry
        if (self.Multiline): # QgsMultiPolyLine
            return self.LineGeometry[self.currentIndexPart][self.currentIndexPoint] , self.LineGeometry[self.currentIndexPart][self.currentIndexPoint + 1] 
        else: # QgsPolyLine
            return self.LineGeometry[self.currentIndexPoint] , self.LineGeometry[self.currentIndexPoint + 1] 
            
    def nextPart(self): # next part of line geometry
        if (self.Multiline): # QgsMultiPolyLine
            if (self.currentIndexPoint + 2 < len(self.LineGeometry[self.currentIndexPart])): # if not the last pair of points in current polyline
                self.currentIndexPoint += 1
            elif (self.currentIndexPart + 1 < len(self.LineGeometry)): # try to access next polyline
                self.currentIndexPart += 1
                self.currentIndexPoint = 0
            else:
                return False

            self.currentPoint = self.LineGeometry[self.currentIndexPart][self.currentIndexPoint] # reset current point for calculations
            self.currentVector = self.LineGeometry[self.currentIndexPart][self.currentIndexPoint + 1] - self.currentPoint # set current vector for nextPoint calculation

            return True
            
        else: # QgsPolyLine
            if (self.currentIndexPoint + 2 < len(self.LineGeometry)): # if not the last pair of points
                self.currentIndexPoint += 1
                self.currentPoint = self.LineGeometry[self.currentIndexPoint] # reset current point for calculations
                self.currentVector = self.LineGeometry[self.currentIndexPoint + 1] - self.currentPoint # set current vector for nextPoint calculation
                return True
            else:
                return False
    
    def reset(self): # reset wrapper
        self.currentIndexPoint = -1 # current Id of original point of geometry
        self.currentIndexPart = 0 # current Id of part of MultiPolyLine
        self.currentVector = None # current vector on which need to find new point
        self.currentPoint = None # current point from which need to find new point on given currentvector


class VectorBuilder(QgsTask): # Task for building vector in given layer
    printres = pyqtSignal(str)

    # TODO - class which creates vector objects in given layer
    # with given fields
    def __init__(self, description, layer, points_list, args_dict):
        super().__init__(description, QgsTask.CanCancel)
        self.vl = layer
        self.pr = self.vl.dataProvider()

        self.points = points_list
        self.args = args_dict

        self.fids = QgsFields()
        for key, _ in self.args[0].items():
                self.fids.append(QgsField(key, QVariant.Double))

    def run(self):
        features = []

        for i in range(0, len(self.points)):
            feature = QgsFeature()
            feature.setGeometry( QgsGeometry.fromPointXY(self.points[i]) )

            feature.setFields(self.fids)

            for key, value in self.args[i].items():
                feature.setAttribute(key, value)

            features.append(feature)
            print(self.args[i])


        self.vl.startEditing()
        self.pr.addFeatures(features)
        self.vl.commitChanges()


        self.setProgress(100)

        return True
    
    def finished(self, result): # завершение задачи
        # now = datetime.datetime.now()
        # print(now)
        # print('*** [VectorBuilder] Task Finished with ' + str(result))
        self.printres.emit('* [VectorBuilder] Task Finished with ' + str(result))
        self.result = result
    
    def cancel(self): # отмена задачи
        print('* [VectorBuilder] Task cancel')
        self.printres.emit('* [VectorBuilder] Task cancel')
        super().cancel()

class CalculateTask(QgsTask): # main calculation task
    initBuliderTask = pyqtSignal(list , list)
    printres = pyqtSignal(str)

    # def __init__(self, description, features):
    def __init__(self, description, wrappedlines, options):
        super().__init__(description, QgsTask.CanCancel)
        self.wrappedLinesList = wrappedlines
        self.taskOptions = options

        self.result = None

    def run(self): # основная функция задачи  
        print('** Task run')

        step = 100 / len(self.wrappedLinesList)
        current_progress = 0.0

        for feature in self.wrappedLinesList:
            if self.isCanceled():
                return False
            
            if (not feature.isValid):
                self.printres.emit("* Not valid feature")
                continue
            
            point_list = []
            arg_list = []

            while(feature.nextPointOnGeometryAt(100)):
                # print(self.taskOptions.renderValuesAtPoint(feature.getCurrentPoint()))
                point_list.append(feature.getCurrentPoint())
                arg_list.append(self.taskOptions.renderValuesAtPoint(feature.getCurrentPoint()))
            
            # print(self.taskOptions.renderValuesAtPoint(feature.getCurrentPoint()))
            point_list.append(feature.getCurrentPoint())
            arg_list.append(self.taskOptions.renderValuesAtPoint(feature.getCurrentPoint()))
            
            self.initBuliderTask.emit(point_list, arg_list)

            # UPDATE PROGRESS
            current_progress += step
            self.setProgress(round(current_progress))

        return True
    
    def finished(self, result): # завершение задачи
        # now = datetime.datetime.now()
        # print(now)
        print('* [CalculateTask] Task Finished with ' + str(result))
        self.printres.emit('* [CalculateTask] Task Ended with ' + str(result))
        self.result = result
       
    def cancel(self): # отмена задачи
        print('* [CalculateTask] Task cancel')
        self.printres.emit('* [CalculateTask] Task cancel')
        super().cancel()



class DemRoadCalculator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DemRoadCalculator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dem Road Calculator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.task_manager = QgsTaskManager()  
        self.task_manager.allTasksFinished.connect(self.allTasksFinished)
        self.task_manager.progressChanged.connect(self.taskProgresChanged)

        self.active_task = None
        self.iterator = 0

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DemRoadCalculator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dem_road_calculator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Dem Road Calculator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Dem Road Calculator'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DemRoadCalculatorDialog()

            self.dlg.pushButton_start.clicked.connect(self.runTask)
            #self.dlg.pushButton_stop.clicked.connect(self.stopTask)

            self.dlg.pushButton_deb.clicked.connect(self.printDebug)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def WrapLines(self, vector_layer):
        lines_list = []
        for geom in vector_layer.getFeatures():
            wrapper = LineWrapper(geom.geometry())
            # print(wrapper.LineGeometry)

            lines_list.append(wrapper)

        return lines_list

    def runTask(self):
        self.dlg.progressBar.setValue(0)
        self.dlg.setGUIEnabled(False)

        options = self.dlg.getTaskOptions()
        data = CalculationData(options[1],options[0],options[2],options[6],options[3],options[5],options[4])

        
        self.vectorLayer = QgsVectorLayer("Point", "temporary_points", "memory") # create temporary layer
        self.vectorLayer.setCrs(self.dlg.mMapLayerComboBox_lines.currentLayer().crs())
        
        print(options[6])


        for value in list(sorted(options[6].values())):
            self.vectorLayer.dataProvider().addAttributes( [QgsField(value,  QVariant.Double) ] )
        
            
        self.vectorLayer.updateFields()

        QgsProject.instance().addMapLayer(self.vectorLayer)

        
        lines_list = self.WrapLines(self.dlg.mMapLayerComboBox_lines.currentLayer()) # Wrap Line geometry

        
        self.active_task = CalculateTask(TASK_DESCRIPTION,lines_list,data) # start new task
        self.task_manager.addTask(self.active_task)
        self.active_task.initBuliderTask.connect(self.runVectorEditTask)
        self.active_task.printres.connect(self.printRes)

        self.printRes(" * start")


    def runVectorEditTask(self, array, array_args):
        task = VectorBuilder(TASK_DESCRIPTION,self.vectorLayer,array, array_args)
        task.printres.connect(self.printRes)
        # self.active_task.addSubTask(task,[], QgsTask.ParentDependsOnSubTask)
        self.task_manager.addTask(task)
        # task.run()


    def allTasksFinished(self): # все активные задачи завершены
        # now = datetime.datetime.now()
        # print(now, "[Task Manager]: ALL TASKS FINISED")
        self.printRes(" * [Task Manager]: ALL TASKS FINISED")
        # for i, task in enumerate(self.task_manager.tasks()):
        #     self.dlg.textEdit_log.append("Task No " + str(i) + " Finished with " + str(task.result))
        #     del task
        
        self.dlg.setGUIEnabled(True)
        
        # print(len(self.task_manager.tasks()))
        # print(self.task_manager.count())
    
    def taskProgresChanged(self, task_id, progress): # прогресс в задаче обновлен
        # print(task_id, progress)
        self.dlg.progressBar.setValue(int(progress))

    def printRes(self, string):
        print('[',self.iterator,']' , string)
        self.iterator += 1

    def printDebug(self):
        for i, task in enumerate(self.task_manager.tasks()):
            self.printRes("Task No " + str(i) + " result is " + str(task.result))
            self.printRes("Task No " + str(i) + "  isActive " + str(task.isActive()))
            self.printRes("Task No " + str(i) + "  status " + str(task.status()))
            print(task)
            del task
        pass

